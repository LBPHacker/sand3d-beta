#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 1) buffer predictionBuffer
{
	float depth[];
};

layout(std430, binding = 3) buffer voxelData
{
	uint data[];
};

uniform float iTime;
uniform vec3 position;

uniform vec3 front;
uniform vec3 right;
uniform vec3 up;

uniform uint bounds;
uniform uint chunkExp;
uniform uint chunkBounds;
uniform uint chunkLength;
uniform uint chunkVoxelNum;

// gl_NumWorkGroups.xy gives the resolution of the prediction buffer

const int MAX_RAY_STEPS = 128;

uint index3dA(uvec3 pos)
{
	uint chunkX = pos.x >> chunkExp;
	uint chunkY = pos.y >> chunkExp;
	uint chunkZ = pos.z >> chunkExp;

	uint dX = pos.x - (chunkX << chunkExp);
	uint dY = pos.y - (chunkY << chunkExp);
	uint dZ = pos.z - (chunkZ << chunkExp);

	return chunkVoxelNum * (chunkX + chunkLength * (chunkY + chunkLength * chunkZ))
			+ (dX + ((dY + (dZ << chunkExp)) << chunkExp));
}

void main()
{
	float rayDepth = 0.0;
	//depth[gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x] = (gl_WorkGroupID.x ^ gl_WorkGroupID.y) & 1;

	// Bounds Intersection check
	vec3 boxMin = vec3(0), boxMax = vec3(bounds);

	// Set ray direction and ray position
	vec2 screenPos = ((gl_WorkGroupID.xy + 0.5) / vec2(gl_NumWorkGroups.xy)) * 2.0 - 1.0;
	vec3 rayPos = position;
	vec3 rayDir = normalize(front + screenPos.x * right + screenPos.y * up * float(gl_NumWorkGroups.y) / float(gl_NumWorkGroups.x));

	// Bounding box
	ivec3 mapMax;

	vec3 t1 = (boxMin - rayPos) / rayDir;
	vec3 t2 = (boxMax - rayPos) / rayDir;
	
	vec3 tminV = min(t1,t2);
	float tmin = max(max(tminV.x, tminV.y), tminV.z);
	vec3 tmaxV = max(t1,t2);
	float tmax = min(min(tmaxV.x, tmaxV.y), tmaxV.z);

	mapMax = ivec3(floor(rayPos + rayDir * tmax));
	
    if (tmax < tmin || tmax < 0.0)
    {
		rayDepth = -1.0;
		depth[gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x] = rayDepth;
        return;
    }
	else if (tmin > 0.0)
	{
		rayDepth += tmin;
	}

	// Initialize variables for voxel traversal
	ivec3 mapPos = ivec3(floor(rayPos));
	ivec3 rayStep = ivec3(sign(rayDir));
	vec3 tDelta = 1.0 / rayDir * rayStep;
	vec3 tMax = (rayStep * ((mapPos - rayPos) + 0.5) + 0.5) * tDelta;

	// Color and shading of the voxels
	bvec3 mask = bvec3(false);

	// voxMap needs to be called before the bounding box so the area is a perfect circle and not look weird at corners
	// Though if we do this, then there is an infinite while loop error
	ivec3 voxMap = ivec3(floor(rayPos + rayDir * MAX_RAY_STEPS));

	while (true)
	{
		// Get Voxel data
        uint dat = 0;
		if (mapPos.x >= 0 && mapPos.x < bounds && mapPos.y >= 0 && mapPos.y < bounds && mapPos.z >= 0 && mapPos.z < bounds)
		{
			dat = data[index3dA(mapPos)];
		}

        if (dat > 0)
		{
			if (mask.x) { rayDepth += tMax.x; }
			else if (mask.y) { rayDepth += tMax.y; }
			else if (mask.z) { rayDepth += tMax.z; }
			break;
		}

		if (mapPos == mapMax || mapPos == voxMap) { break; }
		
		mask.x = (tMax.x <= tMax.y) && (tMax.x <= tMax.z);
		mask.y = (tMax.y <= tMax.x) && (tMax.y <= tMax.z);
		mask.z = (tMax.z <= tMax.x) && (tMax.z <= tMax.y);

		tMax += ivec3(mask) * tDelta;
		mapPos += ivec3(mask) * rayStep;
	}

	depth[gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x] = rayDepth;
}